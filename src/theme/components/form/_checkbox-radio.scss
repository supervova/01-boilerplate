@use '../../base/abstracts' as *;

// -----------------------------------------------------------------------------
// #region: MAPS AND MIXINS
// -----------------------------------------------------------------------------

// stylelint-disable custom-property-no-missing-var-function
$option-states: (
  'valid': (
    --option-border-color: var(--color-ink-border),
  ),
  'invalid': (
    --option-border-color: var(--color-base-error),
  ),
);

$option-sizes: (
  'sm': (
    --option-size: var(--size-1p5),
  ),
  'base': (
    --option-size: var(--size-2),
  ),
  'lg': (
    --option-size: var(--size-2p5),
  ),
);

@mixin option-states {
  &:active {
    filter: var(--filter-brightness-up);
  }

  &:focus-visible {
    @include state-focus;
    outline: 0;
  }

  &:checked {
    background-color: var(--color-ink-2ry-brand);
    border-color: var(--color-ink-2ry-brand);
  }

  &:disabled {
    @include state-disabled();
  }
}

@mixin option-variants($map) {
  @each $variant, $props in $map {
    .form-input-#{$variant} {
      @each $prop, $value in $props {
        #{$prop}: #{$value};
      }
    }
  }
}

@mixin option-validation-states {
  &[aria-invalid='false'] {
    border-color: var(--color-ink-border);
  }

  &[aria-invalid='true'] {
    border-color: var(--color-base-error);
  }
}
// #endregion

// -----------------------------------------------------------------------------
// #region: BASE
// -----------------------------------------------------------------------------

@scope (.form-option) {
  :scope [type='checkbox'],
  :scope [type='radio'] {
    --option-size: var(--size-2);
    --option-border: 1px;
    --option-border-color: var(--color-ink-border);

    appearance: none;
    background-color: var(--color-bg-2ry);
    background-position: center;
    background-repeat: no-repeat;
    background-size: contain;
    border: var(--option-border) solid var(--option-border-color);
    cursor: pointer;
    flex: 0 0 auto;
    margin-inline-end: var(--size-1);
    margin-top: 0;
    padding: 0;
    pointer-events: auto;
    position: absolute;
    top: rem(11);
    left: 0;
    vertical-align: middle;
    width: var(--option-size);
    height: var(--option-size);

    &::-ms-check {
      display: none;
    }

    @include option-states;
    @include option-variants($option-sizes);

    &:indeterminate {
      background-image: url('data:image/svg+xml,%3csvg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"%3e%3cpath fill="none" stroke="%23fff" stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M6 10h8"/%3e%3c/svg%3e');
    }
  }

  // Checkbox specific styles
  :scope [type='checkbox'] {
    border-radius: var(--size-half);

    &:checked {
      background-image: url('data:image/svg+xml,%3csvg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"%3e%3cpath fill="none" stroke="%23fff" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 10l3 3l6-6"/%3e%3c/svg%3e');
    }

    @include option-validation-states;
  }

  // Radio specific styles
  :scope [type='radio'] {
    border-radius: 50%;

    &:checked {
      background-image: url('data:image/svg+xml,%3csvg xmlns="http://www.w3.org/2000/svg" viewBox="-4 -4 8 8"%3e%3ccircle r="2" fill="%23fff"/%3e%3c/svg%3e');
    }

    @include option-validation-states;
  }
}
// #endregion

// -----------------------------------------------------------------------------
// #region: CONTAINER STYLES
// -----------------------------------------------------------------------------

/* label */.form-option {
  --option-padding-top: var(--padding-top-base);
  --option-padding-bottom: var(--padding-bottom-base);

  color: var(--color-ink-2ry);
  font-size: var(--font-size-base);
  line-height: var(--line-height-base);
  margin: 0;
  padding-top: var(--option-padding-top);
  padding-bottom: var(--option-padding-bottom);
  padding-inline-start: var(--size-3);
  position: relative;

  :where(:not(fieldset)) > & {
    margin-bottom: var(--size-2);
  }
}
// #endregion
