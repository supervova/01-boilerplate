@use '../../base/abstracts' as *;

// -----------------------------------------------------------------------------
// #region: MAPS, VARIABLES & MIXINS
// -----------------------------------------------------------------------------

$list-variants: (
  'unstyled': (
    list-style: none,
    margin-bottom: 0,
    padding-left: 0,
  ),
  'inline': (
    list-style: none,
    margin-bottom: 0,
    padding-left: 0,
  ),
  'ul': (
    list-style: none,
    padding-left: var(--size-2p5),
  ),
);

$text-utilities: (
  'lead': h3,
  'petit': caption,
);

@mixin text-base {
  font-variant-numeric: oldstyle-nums;
  margin-top: 0;
  overflow-wrap: break-word;
  padding-bottom: var(--padding-bottom-base);
  padding-top: var(--padding-top-base);
  text-wrap: pretty;

  @supports (text-box-trim: trim-both) {
    padding-block: 0;
    text-box: trim-both cap alphabetic;
  }
}

@mixin list-base {
  font-variant-numeric: oldstyle-nums;
  margin-bottom: var(--size-2);
  margin-top: 0;
}

@mixin list-variants($map) {
  @each $variant, $props in $map {
    &.list.is-#{$variant} {
      @each $prop, $value in $props {
        #{$prop}: #{$value};
      }

      @if $variant == 'inline' {
        li {
          display: inline-block;
          padding: 0;

          &:not(:last-child) {
            margin-inline-end: var(--size-half);
          }
        }
      }
    }
  }
}

@mixin link-states {
  --background-focus: var(--color-bg-brand);

  color: var(--color-ink-link);
  outline: none;
  text-decoration: none;
  transition:
    background-color var(--duration-shortest),
    color var(--duration-shortest),
    text-decoration var(--duration-shortest);

  &:is(:active, :focus-visible) {
    @include state-hover-a;
  }

  &:focus-visible {
    --background-color: var(--background-focus);
  }

  &:is([aria-current]) {
    color: var(--color-current, var(--color-ink-text));
  }

  @media (any-hover: hover) {
    &:hover {
      @include state-hover-a;
    }
  }
}

@mixin text-utilities($map) {
  @each $utility, $level in $map {
    .#{$utility} {
      @include text-format($level);

      @if $utility == 'lead' {
        & {
          margin: 0;
        }
      }
    }
  }
}

// #endregion

// -----------------------------------------------------------------------------
// #region: BASE
// -----------------------------------------------------------------------------

// Focus management
:focus-visible {
  scroll-padding-block-end: var(--scroll-padding-end, 8vh);
}

:target {
  scroll-padding-block-start: var(--size-4);
}

// Block elements
address,
dd,
dt,
p {
  @include text-base;
}

address,
p {
  margin-bottom: var(--size-2);
}

address {
  font-style: normal;
}

div,
td,
th,
li {
  overflow-wrap: break-word;
}

// Lists
ol,
ul {
  @include list-base;
  @include list-variants($list-variants);
}

// Nested lists
:where(ul ul, ul ol, ol ol, ol ul) {
  margin-bottom: 0;
  padding-top: var(--size-1);
}

:where(ul ul, ol ul) {
  padding-inline-start: var(--size-2p5);
}

ul {
  padding-inline-start: 0;
}

// List markers
:where(ul:not([class]):not(nav ul)) > li::marker,
ul.list.is-ul > li::marker {
  color: var(--color-brand-primary);
  content: '\2022\00a0\00a0';
}

ol {
  padding-inline-start: var(--size-4);

  li::marker {
    color: var(--color-ink-2ry);
    font-variant-numeric: tabular-nums;
  }
}

// List items
li {
  @include text-base;

  > p:first-child {
    padding-top: 0;
  }

  > p:last-child {
    padding-bottom: 0;
  }

  @supports (text-box-trim: trim-both) {
    margin-bottom: var(--size-1);
    text-box: trim-both cap alphabetic;
  }
}

// Navigation lists
nav ul {
  list-style: none;
  margin-bottom: 0;
  padding-inline-start: 0;
}

// Description lists
dl {
  --grid-columns: 1fr 2fr;

  display: grid;
  gap: var(--size-1) var(--size-3);
  grid-template-columns: var(--grid-columns);
}

dt {
  font-weight: bolder;
}

dd {
  margin-inline-start: 0;
}

// Dividers
hr {
  --margin: calc(var(--size-line) * 3);

  border: 0;
  border-block-start: var(--border-width) solid var(--color-ink-border);
  margin-block: calc(var(--margin) - var(--border-width)) var(--margin);
}

// #endregion

// -----------------------------------------------------------------------------
// #region: INLINE ELEMENTS
// -----------------------------------------------------------------------------

:where(a:not(.btn):not([role='button'])),
[role='link'] {
  @include link-states;
}

.link.is-forward {
  align-self: start;
  display: inline-flex;
  position: relative;
  white-space: nowrap;
}

// Text formatting
b,
strong {
  font-weight: bolder;
}

em,
i {
  font-style: italic;
}

small {
  font-size: var(--font-size-caption);
  line-height: var(--line-height-caption);
}

// Sub/Sup
sub,
sup {
  font-size: var(--font-size-caption);
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  inset-block-end: -0.25em;
}

sup {
  inset-block-start: -0.5em;
}

// Selection
::selection {
  background: var(--color-bg-bold-brand);
  color: var(--color-ink-text-inverse);
  text-shadow: none;
}

// #endregion

// -----------------------------------------------------------------------------
// #region: UTILITIES
// -----------------------------------------------------------------------------

@include text-utilities($text-utilities);

// #endregion
