@use 'sass:list';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:string';
@use 'config' as *;

// -----------------------------------------------------------------------------
// #region: UNIT CONVERSION
// -----------------------------------------------------------------------------

// Removes unit from a value
@function strip-unit($value) {
  @return math.div($value, ($value * 0 + 1));
}

// Converts px values to rem units based on root font size
@function rem($value) {
  @if $value == 0 {
    @return 0;
  }
  @return math.div(strip-unit($value), strip-unit($html-font-size)) * 1rem;
}

// #endregion

// -----------------------------------------------------------------------------
// #region: TYPOGRAPHY
// -----------------------------------------------------------------------------

// Calculate baseline offset based on font metrics
@function calculate-baseline-offset($font-size, $line-height-px, $font-family: 'system') {
  $metrics: map.get($font-metrics, $font-family);
  $cap-height: map.get($metrics, 'cap-height');
  $ascender: map.get($metrics, 'ascender');
  $descender: map.get($metrics, 'descender');

  $content-area: $font-size * ($ascender + $descender);
  $leading: $line-height-px - $content-area;

  // Distance from line-height top to cap-height
  $offset-to-cap: ($leading * 0.5) + ($font-size * ($ascender - $cap-height));

  // Round to nearest pixel for grid alignment
  $baseline-offset: round($offset-to-cap);

  // Find remainder to align to grid
  $remainder: $baseline-offset % $lh-step;
  $padding-top: $remainder;
  $padding-bottom: $lh-step - $remainder;

  @return ($padding-top, $padding-bottom);
}

// Round line height to nearest step
@function round-line-height($font-size, $target-ratio: 1.5) {
  $target-px: $font-size * $target-ratio;
  $steps: math.ceil($target-px / $lh-step);
  @return $steps * $lh-step;
}

// Helper function to format typography values
@function _format-typography-value($prop, $val) {
  // Properties that need rem conversion from px values
  $rem-props: 'font-size', 'padding-top', 'padding-bottom', 'letter-spacing';

  // Skip conversion for CSS variables and keywords
  @if meta.type-of($val) == string and (string.index($val, 'var(') == 1 or $val == 'normal') {
    @return $val;
  }

  // Skip conversion for unitless line-height ratios
  @if $prop == 'line-height' and meta.type-of($val) == number and math.unitless($val) {
    @return $val;
  }

  // Convert to rem for specific properties
  @if list.index($rem-props, $prop) and meta.type-of($val) == number and math.unitless($val) and $val != 0 {
    @return rem($val);
  }

  @return $val;
}

// #endregion
