// -----------------------------------------------------------------------------
// Table of contents
// -----------------------------------------------------------------------------
// grid-base                   - Base grid layout with default column, row, and gap settings
// multi-grid                  - Grid layout with specific settings
// grid-auto                   - Grid with automatic columns based on a minimum width
// grid                        - Responsive grid layout combining base and 12-column layouts
// grid-columns                - Generates column classes for grid with custom breakpoints
// flex-base                   - Base flex layout with default settings
// flex-grid                   - It can be a row or a 2-dimensional flex layout. Use this one within media query.
// container                   - Centers content with a max-width and auto margins
// text-format                 - Sets font size, line height, and padding for text elements
// label                       - Styles for labels with optional uppercase transformation
// text-truncate               - Single line text truncation with ellipsis
// multiline-truncate          - Multi-line text truncation with ellipsis
// multiline-truncate-override - Override multi-line truncation
// text-inline-block           - Text with inline-block display
// baseline-debug              - Baseline grid for debugging
// border                      - Adds a border overlay with flex display and overflow handling
// utility-classes             - Generates utility classes based on provided properties
// visually-hidden             - Hides elements visually but keeps them accessible
// state-disabled              - Uses visual cues to indicate that the button is disabled
// state-focus                 - Adds a focus ring for accessibility
// state-hover-a               - Adds a :hover underscore to links
// menu-item                   - Styles for menu items with padding, alignment, and focus behavior
// scrollbar                   - Styles for scrollbars with customizable properties
// -----------------------------------------------------------------------------

@use 'sass:map';
@use 'sass:math';
@use 'functions' as *;
@use 'config' as *;

// -----------------------------------------------------------------------------
// #region: LAYOUT
// -----------------------------------------------------------------------------

@mixin grid-base($gap: var(--size-2)) {
  display: grid;
  gap: var(--grid-gap, $gap);
  grid-template-columns: var(--grid-columns, 1fr);
  grid-template-rows: var(--grid-rows, auto);

  // HACK for grid and flex direct children in overflow
  // https://stackoverflow.com/questions/36247140/why-dont-flex-items-shrink-past-content-size
  > * {
    min-width: 0;
    min-height: 0;
  }
}

// Multi-column grid
@mixin multi-grid($columns: 12) {
  --grid-columns: repeat(#{$columns}, minmax(0, 1fr));
}

// Auto grid
@mixin grid-auto($min-width: rem(80)) {
  --grid-columns: repeat(auto-fit, minmax(#{$min-width}, 1fr));
}

// Adaptive grid with automatic switching to 12 columns
@mixin grid($mobile-columns: 1fr, $desktop-columns: 12) {
  @include grid-base();

  @media (--tablet) {
    @include multi-grid();
  }
}

@mixin grid-columns($columns: 12, $screens: $mq-breakpoints-lg) {
  @each $screen in $screens {
    @media (--#{$screen}) {
      $class-base: null;

      // Classes aliases
      @if $screen != all {
        @for $i from 1 through $columns {
          // Create aliases for halves, thirds and fourths

          // stylelint-disable max-nesting-depth
          @if math.div($columns, $i) == 4 {
            $class-base: 1\/4;
          } @else if math.div($columns, $i) == 3 {
            $class-base: 1\/3;
          } @else if math.div($columns, $i) == 2 {
            $class-base: 1\/2;
          } @else if $i == 8 {
            $class-base: 2\/3;
          } @else if $i == 9 {
            $class-base: 3\/4;
          } @else if $i == 12 {
            $class-base: 1\/1;
          } @else {
            $class-base: $i;
          }

          // Prefixed classes
          @if $class-base != $i {
            .#{$screen}\:col-#{$class-base},
            .#{$screen}\:col-#{$i} {
              grid-column: auto / span $i;
            }
          } @else {
            .#{$screen}\:col-#{$class-base} {
              grid-column: auto / span $i;
            }
          }
        }
        // stylelint-enable max-nesting-depth

        // Offsets / Start position
        @for $i from 1 through ($columns - 1) {
          .#{$screen}\:col-start-#{$i} {
            grid-column-start: $i;
          }
        }
      }
    }
  }
}

@mixin flex-base() {
  --columns: 1;
  --gap: var(--size-2);

  display: flex;
  flex-direction: column;
  gap: var(--gap);
}

// Use this one within media query. Use $columns to define base layout
@mixin flex-grid($columns: 2, $gap: var(--size-3), $let-flex: false) {
  --gap: #{$gap};
  --columns: #{$columns};

  @if $let-flex {
    display: flex;
  }

  flex-direction: row;
  flex-wrap: wrap;

  > * {
    width: calc(
      100% / var(--columns) - var(--gap) * (var(--columns) - 1) / var(--columns)
    );
  }
}

@mixin container($width: var(--width-container)) {
  margin-inline: auto;
  max-width: $width;
  padding-inline: var(--padding-x-container);
  position: relative;
  width: 100%;
}
// #endregion

// -----------------------------------------------------------------------------
// #region: TYPOGRAPHY
// -----------------------------------------------------------------------------

@mixin text-format($level) {
  font-size: var(--font-size-#{$level});
  line-height: var(--line-height-#{$level});
  padding-bottom: var(--padding-bottom-#{$level});
  padding-top: var(--padding-top-#{$level});

  @supports (text-box-trim: trim-both) {
    text-box: trim-both cap alphabetic;
    padding-block: 0;
  }
}

// Добавить в _mixins.scss в раздел TYPOGRAPHY после существующих миксинов:

// Generate CSS custom properties for typography styles
@mixin generate-typography-vars($styles) {
  @each $name, $data in $styles {
    // Mobile-first declarations wrapped in & {}
    & {
      $mobile: map.get($data, mobile);
      @if $mobile {
        @each $prop, $val in $mobile {
          --#{$prop}-#{$name}: #{_format-typography-value($prop, $val)};
        }
      }
    }

    // Tablet and up
    @each $bp in $typography-breakpoints {
      $bp-data: map.get($data, $bp);
      @if $bp-data {
        @media (--#{$bp}) {
          @each $prop, $val in $bp-data {
            --#{$prop}-#{$name}: #{_format-typography-value($prop, $val)};
          }
        }
      }
    }
  }
}

@mixin label($uppercase: true) {
  font-family: var(--font-family-base);
  font-size: var(--font-size-label);
  font-weight: 500;
  letter-spacing: 0.2px;
  line-height: var(--line-height, var(--line-height-label));

  @if $uppercase {
    text-transform: uppercase;
  }
}

@mixin text-truncate() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin multiline-truncate($lines: 4, $line-height: rem(24), $padding-block: rem(8)) {
  // All old stuff is required
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $lines;
  display: -webkit-box;
  line-clamp: $lines;
  max-height: $lines * $line-height + $padding-block;
  overflow: hidden;
}

@mixin multiline-truncate-override($lines: 4, $line-height: rem(24), $padding-block: rem(8)) {
  -webkit-line-clamp: $lines;
  line-clamp: $lines;
  max-height: $lines * $line-height + $padding-block;
}

@mixin text-inline-block {
  display: inline-block;
  margin-block: -1 * rem(1);
  padding: rem(1) var(--size-1);
  vertical-align: baseline;
}

// Baseline debug helper
@mixin baseline-debug($color: rgba(255, 0, 0, 0.2)) {
  position: relative;

  &::after {
    background-image: repeating-linear-gradient(
      transparent,
      transparent #{rem($lh-step - 1)},
      $color #{rem($lh-step - 1)},
      $color #{rem($lh-step)}
    );
    content: '';
    height: 100%;
    left: 0;
    pointer-events: none;
    position: absolute;
    top: 0;
    width: 100%;
    z-index: 1000;
  }
}
// #endregion

// -----------------------------------------------------------------------------
// #region: GRAPHICS
// -----------------------------------------------------------------------------

@mixin border() {
  border-radius: var(--border-radius-base);
  display: flex;
  max-width: max-content;
  overflow: hidden;
  position: relative;

  // Border
  &::after {
    border-radius: var(--border-radius-base);
    box-shadow: inset 0 0 0 1px var(--color-ink-border-neutral);
    content: '';
    display: block;
    inset: 0;
    pointer-events: none;
    position: absolute;
  }

  &:empty {
    display: none;
  }
}
// #endregion

// -----------------------------------------------------------------------------
// #region: UTILITIES / HELPERS
// -----------------------------------------------------------------------------

@mixin utility-classes($props) {
  // Generate classes for all breakpoints
  @each $property, $property-map in $props {
    $class-base: map.get($property-map, class-base);
    $values: map.get($property-map, values);

    @each $key, $value in $values {
      .#{$class-base}-#{$key} {
        #{$property}: $value;
      }
    }
  }

  // Generate adaptive classes for all media queries
  @each $screen in $mq-breakpoints {
    @media (--#{$screen}) {
      @each $property, $property-map in $props {
        $class-base: map.get($property-map, class-base);
        $values: map.get($property-map, values);

        @each $key, $value in $values {
          .#{$screen}\:#{$class-base}-#{$key} {
            #{$property}: $value;
          }
        }
      }
    }
  }
}

@mixin visually-hidden() {
  border: 0;
  clip: rect(0, 0, 0, 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

@mixin state-disabled() {
  cursor: not-allowed;
  filter: grayscale(100%);
  opacity: 0.5;
  pointer-events: none;
}

@mixin state-focus($size: rem(2), $color: var(--color-ink-2ry-info)) {
  box-shadow: 0 0 0 $size var(--color-ink-2ry-info);
  outline: 0;

  // outline: $size solid $color;
  // outline-offset: $offset;
}

@mixin state-hover-a {
  text-decoration: underline;
  text-decoration-skip-ink: auto;
  text-decoration-thickness: max(0.08em, 1px);
  text-underline-offset: 0.125em;
}
// #endregion

// -----------------------------------------------------------------------------
// #region: ELEMENTS
// -----------------------------------------------------------------------------

@mixin menu-item() {
  --button-height: auto;

  align-items: center;
  background-color: transparent;
  border: 0;
  border-radius: var(--border-radius-sm);
  color: var(--menu-color, var(--color-ink-2ry));
  display: flex;
  font-size: inherit;
  font-weight: inherit;
  gap: var(--size-1);
  justify-content: flex-start;
  outline: 0;
  padding: var(--menu-item-padding, var(--size-1) var(--size-2));
  position: relative;
  text-align: left;
  text-decoration: none;
  text-transform: none;
  transition:
    background var(--duration-shortest),
    color var(--duration-shortest);
  user-select: none;
  width: 100%;

  > * {
    min-width: 0;
  }

  &:focus-visible {
    @include state-focus();
  }

  @media (any-hover: hover) {
    &:hover {
      background-color: var(--color-ink-fill);
      text-decoration: none;
    }
  }

  &:is(:active, :focus-visible) {
    background-color: var(--color-ink-fill);
    text-decoration: none;
  }
}

@mixin scrollbar(
  $size: var(--size-1),
  $thumb-bg: var(--color-scroll-thumb),
  $track-bg: var(--color-scroll-track)
) {
  scrollbar-color: $thumb-bg $track-bg;
  scrollbar-width: thin;

  // Previous webkit browsers
  &::-webkit-scrollbar {
    height: $size;
    width: $size;
  }

  &::-webkit-scrollbar-track {
    background: $track-bg;
    border: none;
    box-shadow: none;
  }

  // Handle
  &::-webkit-scrollbar-thumb {
    background-color: $thumb-bg;
    border: var(--size-half) solid transparent;
    border-radius: var(--border-radius-pill);
  }
}
// #endregion
